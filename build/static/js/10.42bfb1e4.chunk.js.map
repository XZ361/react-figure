{"version":3,"sources":["components/Tips.js","components/Uploader.js","pages/Home.js"],"names":["Tips","styled","div","Component","observer","children","UserStore","useStore","currentUser","Result","H1","h1","Imge","img","Dragger","Upload","ImageStore","ref1","useRef","ref2","store","useLocalStore","width","setWidth","height","setHeight","serverFile","attributes","url","widthStr","heightStr","props","showUploadList","beforeUpload","file","setFile","setFilename","name","message","warning","window","test","type","size","error","upload","then","console","log","catch","tip","spinning","isUploading","className","InboxOutlined","target","rel","href","filename","src","alt","ref","onChange","current","value","placeholder","fullStr","Home","style","color","Uploader"],"mappings":"mUAMA,IAAMA,EAAOC,IAAOC,IAAV,KAqBKC,EAfGC,aAAS,YAAmB,IAAhBC,EAAe,EAAfA,SAClBC,EAAcC,cAAdD,UAER,OACI,oCAEQA,EAAUE,YAAc,KAAO,kBAACR,EAAD,KAAOK,O,0YCXtD,IAAMI,EAASR,IAAOC,IAAV,KAONQ,EAAKT,IAAOU,GAAV,KAKFC,EAAOX,IAAOY,IAAV,KAIFC,EAAYC,IAAZD,QAqHOX,EAjHGC,aAAS,WAAM,MAEKG,cAA1BS,EAFqB,EAErBA,WAAYV,EAFS,EAETA,UACdW,EAAOC,mBACPC,EAAOD,mBACPE,EAAQC,aAAc,iBAAO,CAC/BC,MAAO,KACPC,SAF+B,SAEtBD,GACLF,EAAME,MAAQA,GAElB,eACI,OAAOF,EAAME,MAAN,aAAoBF,EAAME,OAAU,IAE/CE,OAAQ,KACRC,UAT+B,SASrBD,GACNJ,EAAMI,OAASA,GAEnB,gBACI,OAAOJ,EAAMI,OAAN,aAAqBJ,EAAMI,QAAW,IAEjD,cAEI,OAAOR,EAAWU,WAAWC,WAAWC,IAAID,WAAWC,IAAM,gBAAkBR,EAAMS,SAAWT,EAAMU,eAWxGC,EAAQ,CACVC,gBAAgB,EAChBC,aAAc,SAAAC,GAIV,OAHAlB,EAAWmB,QAAQD,GACnBlB,EAAWoB,YAAYF,EAAKG,MAEE,OAA1B/B,EAAUE,aACV8B,IAAQC,QAAQ,iEAET,IAEXC,OAAON,KAAOA,EAET,wCAAwCO,KAAKP,EAAKQ,MAKnDR,EAAKS,KAAO,SACZL,IAAQM,MAAM,uDACP,IAGX5B,EAAW6B,SACNC,MAAK,SAACpB,GACHqB,QAAQC,IAAI,4BACZD,QAAQC,IAAItB,MACbuB,OAAM,WACLF,QAAQC,IAAI,gCAEb,IAhBHV,IAAQM,MAAM,+EACP,MAmBnB,OACI,6BACI,kBAAC,IAAD,CAAMM,IAAI,wBAASC,SAAUnC,EAAWoC,aACpC,kBAACtC,EAAYiB,EACT,uBAAGsB,UAAU,wBACT,kBAACC,EAAA,EAAD,OAEJ,uBAAGD,UAAU,mBAAb,gEACA,uBAAGA,UAAU,mBAAb,yGAQJrC,EAAWU,WACP,kBAACjB,EAAD,KACI,kBAACC,EAAD,iCACA,4BACI,wDACA,4BAAI,uBAAG6C,OAAO,SAASC,IAAI,sBAAsBC,KAAMzC,EAAWU,WAAWC,WAAWC,IAAID,WAAWC,KAAMZ,EAAWU,WAAWC,WAAWC,IAAID,WAAWC,MAC7J,kDACA,4BAAKZ,EAAW0C,UAChB,wDACA,4BAAI,kBAAC9C,EAAD,CAAM+C,IAAK3C,EAAWU,WAAWC,WAAWC,IAAID,WAAWC,IAAKgC,IAAI,MACxE,wDACA,4BACI,2BAAOC,IAAK5C,EAAM6C,SArEtB,WACpB1C,EAAMG,SAASN,EAAK8C,QAAQC,QAoEyCC,YAAY,gDACzD,2BAAOJ,IAAK1C,EAAM2C,SAnErB,WACrB1C,EAAMK,UAAUN,EAAK4C,QAAQC,QAkEyCC,YAAY,4CAG9D,4BACI,uBAAGV,OAAO,SAASC,IAAI,sBAAsBC,KAAMrC,EAAM8C,SAAU9C,EAAM8C,YAKnF,SC9HhBC,EAAO/D,aAAS,WAGlB,OACI,oCACI,wBAAIgE,MAAO,CAAEC,MAAO,YAApB,QACA,kBAAC,EAAD,qEACA,kBAACC,EAAD,UAKGH","file":"static/js/10.42bfb1e4.chunk.js","sourcesContent":["import { observer } from 'mobx-react';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useStore } from '../stores';\r\n\r\n\r\nconst Tips = styled.div`\r\n    background:orange;\r\n    color:#fff;\r\n    padding:10px;\r\n    margin:30px 0;\r\n`;\r\nconst Component = observer(({ children }) => {\r\n    const { UserStore } = useStore();\r\n\r\n    return (\r\n        <>\r\n            {\r\n                UserStore.currentUser ? null : <Tips>{children}</Tips>\r\n            }\r\n\r\n        </>\r\n\r\n    )\r\n\r\n});\r\n\r\nexport default Component;\r\n","import { InboxOutlined } from '@ant-design/icons';\r\nimport { message, Spin, Upload } from 'antd';\r\nimport { observer, useLocalStore } from 'mobx-react';\r\nimport React, { useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useStore } from '../stores';\r\n\r\nconst Result = styled.div`\r\n    margin-top:30px;\r\n    padding:20px;\r\n    border:1px dashed #ccc;\r\n\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n    margin:20px 0;\r\n    text-align:center;\r\n`;\r\n\r\nconst Imge = styled.img`\r\n    max-width:300px;\r\n`;\r\n\r\nconst { Dragger } = Upload;\r\n\r\n// 当前组件并没有订阅信息，所以当该改变一次后就不再发生改变了\r\n// 我们需将当前组件作为observer的参数，需要boserver作为一个观察者来观察当前组件\r\nconst Component = observer(() => {\r\n    // 解构imageStore\r\n    const { ImageStore, UserStore } = useStore();\r\n    const ref1 = useRef();\r\n    const ref2 = useRef();\r\n    const store = useLocalStore(() => ({\r\n        width: null,\r\n        setWidth(width) {\r\n            store.width = width;\r\n        },\r\n        get widthStr() {\r\n            return store.width ? `/w/${store.width}` : '';\r\n        },\r\n        height: null,\r\n        setHeight(height) {\r\n            store.height = height;\r\n        },\r\n        get heightStr() {\r\n            return store.height ? `/h/${store.height}` : '';\r\n        },\r\n        get fullStr() {\r\n            // /imageView2/0/w/800/h/400\r\n            return ImageStore.serverFile.attributes.url.attributes.url + '?imageView2/0' + store.widthStr + store.heightStr;\r\n        }\r\n    }))\r\n\r\n    const bindWidthChange = () => {\r\n        store.setWidth(ref1.current.value);\r\n    }\r\n    const bindHeightChange = () => {\r\n        store.setHeight(ref2.current.value);\r\n    }\r\n\r\n    const props = {\r\n        showUploadList: false,\r\n        beforeUpload: file => {\r\n            ImageStore.setFile(file);\r\n            ImageStore.setFilename(file.name);\r\n            // 图片上传之之前做个登陆判断\r\n            if (UserStore.currentUser === null) {\r\n                message.warning('请先登录再上传！！！');\r\n                // 一定要有return false ,否则代码会继续执行上传\r\n                return false;\r\n            }\r\n            window.file = file;\r\n            // 上传图片之前做个图片类型判断,//ig用来忽略大小写\r\n            if (!/(svg$)|(png$)|(jpg$)|(jpeg$)|(gif$)/ig.test(file.type)) {\r\n                message.error('只能上传svg/png/jpg/jpeg/gif格式的图片');\r\n                return false;\r\n            }\r\n            // 判断图片大小\r\n            if (file.size > 1024 * 1024) {\r\n                message.error('图片最大不能超过1M');\r\n                return false;\r\n            }\r\n\r\n            ImageStore.upload()\r\n                .then((serverFile) => {\r\n                    console.log('上传成功');\r\n                    console.log(serverFile);\r\n                }).catch(() => {\r\n                    console.log('上传失败');\r\n                });\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Spin tip=\"上传中...\" spinning={ImageStore.isUploading}>\r\n                <Dragger {...props}>\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                        <InboxOutlined />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">点击或者拖拽上传图片</p>\r\n                    <p className=\"ant-upload-hint\">\r\n                        仅支持.png/.jpg/.gif/.svg格式的图片，图片最大1M\r\n                    </p>\r\n                </Dragger>\r\n            </Spin>\r\n\r\n\r\n            {\r\n                ImageStore.serverFile ?\r\n                    <Result>\r\n                        <H1>上传结果</H1>\r\n                        <dl>\r\n                            <dt>线上地址</dt>\r\n                            <dd><a target=\"_blank\" rel=\"noopener noreferrer\" href={ImageStore.serverFile.attributes.url.attributes.url}>{ImageStore.serverFile.attributes.url.attributes.url}</a></dd>\r\n                            <dt>文件名</dt>\r\n                            <dd>{ImageStore.filename}</dd>\r\n                            <dt>图片预览</dt>\r\n                            <dd><Imge src={ImageStore.serverFile.attributes.url.attributes.url} alt=\"\" /></dd>\r\n                            <dt>定制图片</dt>\r\n                            <dd>\r\n                                <input ref={ref1} onChange={bindWidthChange} placeholder=\"最大宽度（可选)\" />\r\n                                <input ref={ref2} onChange={bindHeightChange} placeholder=\"最大高度(可选)\" />\r\n\r\n                            </dd>\r\n                            <dd>\r\n                                <a target=\"_blank\" rel=\"noopener noreferrer\" href={store.fullStr}>{store.fullStr}</a>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                    </Result>\r\n                    : null\r\n\r\n\r\n            }\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Component;","import { observer } from 'mobx-react';\r\nimport React from 'react';\r\nimport Tips from '../components/Tips';\r\nimport Uploader from '../components/Uploader';\r\n// import { useStore } from '../stores';\r\n\r\nconst Home = observer(() => {\r\n\r\n    // const { UserStore } = useStore();\r\n    return (\r\n        <>\r\n            <h1 style={{ color: '#1890ff' }}>Home</h1>\r\n            <Tips>请先登录再上传！！！</Tips>\r\n            <Uploader />\r\n        </>\r\n    )\r\n});\r\n\r\nexport default Home;"],"sourceRoot":""}