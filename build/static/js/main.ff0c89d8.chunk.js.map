{"version":3,"sources":["components/Footer.js","components/Header.js","components/Loading.js","App.js","serviceWorker.js","index.js","models/index.js","stores/history.js","stores/image.js","stores/user.js","stores/auth.js","stores/index.js","logo.svg"],"names":["Footer","styled","footer","Component","Header","header","Logo","img","StyledLink","NavLink","Login","div","StyledButton","Button","observer","useStore","UserStore","AuthStore","history","useHistory","src","LogoUrl","alt","to","activeClassName","exact","currentUser","attributes","username","type","onClick","logout","push","Loading","Home","lazy","History","About","Register","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","AV","init","appId","appKey","serverURL","Auth","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginedUser","logIn","logOut","current","Uploader","add","file","filename","item","Object","avFile","File","set","save","serverFile","find","page","limit","query","Query","skip","equalTo","descending","results","err","newList","this","list","concat","isLoading","append","length","hasMore","finally","observable","action","newFilename","newFile","isUploading","values","pullUser","success","resetUser","HistoryStore","reset","ImageStore","context","createContext","stores","useContext","module","exports"],"mappings":"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","file":"static/js/main.ff0c89d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Footer = styled.footer`\r\n    padding:10px 100px;\r\n    text-align:center;\r\n    font-size:12px;\r\n    color:#aaa;\r\n`\r\nfunction Component() {\r\n    return (\r\n        <Footer>\r\n            <h1>figure ©2020 Created by XZ</h1>\r\n        </Footer>\r\n    )\r\n}\r\n\r\nexport default Component;","import { Button } from 'antd';\r\nimport { observer } from 'mobx-react';\r\nimport React from 'react';\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport LogoUrl from '../logo.svg';\r\nimport { useStore } from '../stores';\r\n\r\nconst Header = styled.header`\r\n    display:flex;\r\n    align-items:center;\r\n    padding:10px 100px;\r\n    background-color:#02101f;\r\n`;\r\nconst Logo = styled.img`\r\n    height:30px;\r\n`;\r\nconst StyledLink = styled(NavLink)`\r\n    color:#fff;\r\n    margin-left:50px;\r\n\r\n    &.active{\r\n        border-bottom:1px solid #fff;\r\n    }\r\n`\r\nconst Login = styled.div`\r\n    margin-left:auto;\r\n`\r\n// 注意此时的Button是一个组件而不是一个标签\r\nconst StyledButton = styled(Button)`\r\n    margin-left:10px;\r\n`\r\n\r\nconst Component = observer(() => {\r\n    const { UserStore, AuthStore } = useStore();\r\n    const history = useHistory();\r\n    // const [isLogin, setIsLogin] = useState(false);\r\n    const handleLogout = () => {\r\n        AuthStore.logout();\r\n    }\r\n    const handleLogin = () => {\r\n        // console.log('跳转到登陆');\r\n        history.push('/login');\r\n    }\r\n    const handleRegister = () => {\r\n        // console.log('跳转到注册');\r\n        history.push('/register');\r\n    }\r\n\r\n    return (\r\n        <Header>\r\n            <Logo src={LogoUrl} alt=\"\" />\r\n            <nav>\r\n                <StyledLink to=\"/\" activeClassName=\"active\" exact>首页</StyledLink>\r\n                <StyledLink to=\"/history\" activeClassName=\"active\">上传历史</StyledLink>\r\n                <StyledLink to=\"/about\" activeClassName=\"active\">关于</StyledLink>\r\n            </nav>\r\n            <Login>\r\n                {\r\n                    UserStore.currentUser ? <>\r\n                        {UserStore.currentUser.attributes.username} <StyledButton type=\"primary\" onClick={handleLogout}>注销</StyledButton>\r\n                    </> :\r\n                        <>\r\n                            <StyledButton type=\"primary\" onClick={handleLogin}>登录</StyledButton>\r\n                            <StyledButton type=\"primary\" onClick={handleRegister}>注册</StyledButton>\r\n                        </>\r\n                }\r\n\r\n\r\n            </Login>\r\n        </Header>\r\n    )\r\n});\r\n\r\nexport default Component;","import React from 'react';\r\n\r\nfunction Loading() {\r\n    return (\r\n        <div>Loading...</div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React, { lazy, Suspense } from 'react';\nimport { Route, Switch } from \"react-router-dom\";\n// import logo from './logo.svg';\nimport './App.css';\nimport Footer from './components/Footer.js';\nimport Header from './components/Header.js';\nimport Loading from './components/Loading.js';\n\n// 优化\n// import About from './pages/About';\n// import History from './pages/History';\n// import Home from './pages/Home';\n\nconst Home = lazy(() => import('./pages/Home'))\nconst History = lazy(() => import('./pages/History'))\nconst About = lazy(() => import('./pages/About'))\nconst Login = lazy(() => import('./pages/Login'))\nconst Register = lazy(() => import('./pages/Register'))\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <main>\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/history\" component={History} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n          </Switch>\n        </Suspense>\n      </main>\n\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'antd/dist/antd.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import AV, { User } from 'leancloud-storage';\r\nAV.init({\r\n    appId: \"xl5PtXUU3LluVijMH2eF4X9C-gzGzoHsz\",\r\n    appKey: \"hvdyKoPL9MSbM5o2S9WGFTxW\",\r\n    serverURL: \"https://xl5ptxuu.lc-cn-n1-shared.com\"\r\n});\r\n// 用户登陆注册接口层\r\nconst Auth = {\r\n    register(username, password) {\r\n        let user = new User();\r\n        user.setUsername(username);\r\n        user.setPassword(password);\r\n        return new Promise((resolve, reject) => {\r\n            user.signUp().then(loginedUser => { resolve(loginedUser) }, error => { reject(error) })\r\n        })\r\n    },\r\n    login(username, password) {\r\n        return new Promise((resolve, reject) => {\r\n            User.logIn(username, password).then(loginedUser => { resolve(loginedUser) }, error => { reject(error) })\r\n        })\r\n\r\n    },\r\n    logout() {\r\n        User.logOut();\r\n    },\r\n    getCurrentUser() {\r\n        return User.current();\r\n    }\r\n};\r\n// 上传服务器接口层,图片的增删改查操作，目前只有增加和查询操作\r\nconst Uploader = {\r\n    // 传递文件，和文件名参数，实现图片在leancloud的保存\r\n    add(file, filename) {\r\n        const item = new AV.Object('Image');\r\n        const avFile = new AV.File(filename, file);\r\n        item.set('filename', filename);\r\n        item.set('owner', AV.User.current());\r\n        item.set('url', avFile);\r\n        // 为了后续调用方便，我们返回一个Promise对象\r\n        return new Promise((resolve, reject) => {\r\n            // serverFile就是在服务器上保存的图片对象\r\n            item.save().then((serverFile) => {\r\n                resolve(serverFile);\r\n            }, error => {\r\n                reject(error);\r\n            })\r\n        })\r\n\r\n    },\r\n    // 参数为页数和历史记录数\r\n    find({ page = 0, limit = 10 }) {\r\n        const query = new AV.Query('Image');\r\n        query.limit(limit);\r\n        // 每页跳过的查询数\r\n        query.skip(page * limit);\r\n        query.equalTo('owner', AV.User.current());\r\n        // 根据创建时间降序排列\r\n        query.descending('createdAt');\r\n        return new Promise((resolve, reject) => {\r\n            query.find()\r\n                .then((results) => resolve(results))\r\n                .catch((err) => reject(err));\r\n        })\r\n    }\r\n}\r\n\r\nwindow.Uploader = Uploader;\r\n\r\nexport { Auth, Uploader };\r\n\r\n","// 管理用户上传图片的历史信息\r\nimport { message } from 'antd';\r\nimport { action, observable } from 'mobx';\r\nimport { Uploader } from '../models';\r\n\r\nclass HistoryStore {\r\n    @observable list = [];\r\n    @observable isLoading = false;\r\n    @observable hasMore = true;\r\n    @observable page = 0;\r\n    limit = 10;\r\n\r\n    @action append(newList) {\r\n        this.list = this.list.concat(newList);\r\n    }\r\n\r\n    @action find() {\r\n        this.isLoading = true;\r\n        Uploader.find({ page: this.page, limit: this.limit })\r\n            .then(newList => {\r\n                this.append(newList);\r\n                // 每次自动页数加一\r\n                this.page++;\r\n                if (newList.length < this.limit) {\r\n                    this.hasMore = false;\r\n                }\r\n            }).catch(error => {\r\n                message.error('加载历史记录失败！');\r\n            }).finally(() => {\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n\r\n    @action reset() {\r\n        this.list = [];\r\n        this.isLoading = false;\r\n        this.hasMore = true;\r\n        this.page = 0;\r\n    }\r\n\r\n}\r\n\r\nexport default new HistoryStore();","// 用来管理我们的上传数据，供组件调用\r\n// 管理上传数据信息\r\n\r\n// 上传服务器状态层\r\nimport { message } from 'antd';\r\nimport { action, observable } from 'mobx';\r\nimport { Uploader } from '../models';\r\n\r\nclass ImageStore {\r\n    @observable filename = \"\";\r\n    @observable file = null;\r\n    @observable isUploading = false;\r\n    @observable serverFile = null;\r\n\r\n    @action setFilename(newFilename) {\r\n        this.filename = newFilename;\r\n    }\r\n    @action setFile(newFile) {\r\n        this.file = newFile;\r\n    }\r\n\r\n    @action upload() {\r\n        this.isUploading = true;\r\n        // 上传之前，清空原先的图片\r\n        this.serverFile = null;\r\n        //为了在后续的UI组件中可以用到状态， 我们可以返回Promise\r\n        return new Promise((resolve, reject) => {\r\n            Uploader.add(this.file, this.filename)\r\n                .then(serverFile => {\r\n                    this.serverFile = serverFile;\r\n                    resolve(serverFile);\r\n                }).catch((err) => {\r\n                    // console.log(err);\r\n                    message.error('上传失败！')\r\n                }).finally(() => {\r\n                    this.isUploading = false;\r\n                })\r\n        })\r\n\r\n    }\r\n    @action reset() {\r\n        this.isUploading = false;\r\n        this.serverFile = null;\r\n    }\r\n\r\n}\r\n\r\nexport default new ImageStore();\r\n\r\n","// 管理用户信息\r\nimport { action, observable } from 'mobx';\r\nimport { Auth } from '../models';\r\n\r\nclass UserStore {\r\n    @observable currentUser = null;\r\n\r\n    @action pullUser() {\r\n        this.currentUser = Auth.getCurrentUser();\r\n    }\r\n    @action resetUser() {\r\n        this.currentUser = null;\r\n    }\r\n\r\n}\r\n\r\nexport default new UserStore();\r\n\r\n","// 管理用户登陆注册的状态\r\nimport { message } from 'antd';\r\nimport { action, observable } from 'mobx';\r\nimport { Auth } from '../models';\r\nimport HistoryStore from './history';\r\nimport ImageStore from './image';\r\nimport UserStore from './user';\r\n\r\nclass AuthStore {\r\n    // 被观察状态\r\n    // @observable isLogin = false;\r\n    // @observable isLoading = false;\r\n    @observable values = {\r\n        username: '',\r\n        password: ''\r\n    };\r\n\r\n    // 行为\r\n    // @action setIsLogin(isLogin) {\r\n    //     this.isLogin = isLogin;\r\n    // }\r\n    @action setUsername(username) {\r\n        this.values.username = username;\r\n    }\r\n    @action setPassword(password) {\r\n        this.values.password = password;\r\n    }\r\n    @action login() {\r\n        // console.log('登陆中。。。');\r\n        // this.isLoading = true;\r\n        // setTimeout(() => {\r\n        //     console.log('登陆成功！');\r\n        //     this.isLogin = true;\r\n        //     this.isLoading = false;\r\n        // }, 1000);\r\n        return new Promise((resolve, reject) => {\r\n            Auth.login(this.values.username, this.values.password)\r\n                .then(user => {\r\n                    UserStore.pullUser();\r\n                    resolve(user);\r\n                    message.success('登陆成功！');\r\n\r\n                })\r\n                .catch(err => {\r\n                    UserStore.resetUser();\r\n                    message.error('登陆失败！');\r\n                    reject(err)\r\n                })\r\n        })\r\n\r\n    }\r\n    @action register() {\r\n        return new Promise((resolve, reject) => {\r\n            Auth.register(this.values.username, this.values.password)\r\n                .then(user => {\r\n                    UserStore.pullUser();\r\n                    resolve(user);\r\n                    message.success('注册成功！');\r\n                })\r\n                .catch(err => {\r\n                    UserStore.resetUser();\r\n                    message.error('注册失败！');\r\n                    reject(err)\r\n                })\r\n        })\r\n    }\r\n    @action logout() {\r\n        Auth.logout();\r\n        UserStore.resetUser();\r\n        HistoryStore.reset();\r\n        ImageStore.reset();\r\n        message.success('注销成功！');\r\n    }\r\n}\r\n\r\nexport default new AuthStore();\r\n\r\n","// 统一状态入口\r\n\r\nimport { createContext, useContext } from 'react';\r\nimport AuthStore from './auth';\r\nimport HistoryStore from './history';\r\nimport ImageStore from './image';\r\nimport UserStore from './user';\r\n\r\n\r\nconst context = createContext({\r\n    AuthStore,\r\n    UserStore,\r\n    ImageStore,\r\n    HistoryStore\r\n});\r\n// 便于我们在控制台调试\r\nwindow.stores = {\r\n    AuthStore,\r\n    UserStore,\r\n    ImageStore,\r\n    HistoryStore\r\n}\r\n\r\nexport const useStore = () => useContext(context);\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}